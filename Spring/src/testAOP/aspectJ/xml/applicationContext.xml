<?testXml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/aop
       					    http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--创建目标类 -->
    <bean id="serviceAspectJ" class="testAOP.aspectJ.xml.ServiceImpl"/>
    <!-- 切面类 -->
    <bean id="myAspectAspectJ" class="testAOP.aspectJ.xml.MyAspect"/>
    <!--
        AOP编程
        <aop:aspect> 将切面类 声明“切面”，从而获得通知（方法）
			ref 切面类引用
		<aop:pointcut> 声明一个切入点，所有的通知都可以使用。
			expression 切入点表达式
			id 名称，用于其它通知引用
    -->
    <aop:config>
        <aop:aspect ref="myAspectAspectJ">
            <aop:pointcut id="myPointCut" expression="execution(* testAOP.aspectJ.xml.ServiceImpl.* (..))"/>

            <!--
                前置通知：
                <aop:before method="" pointcut-ref=""/>
                    method：切面中的通知名
                    pointcut：切入点表达式
                    pointcut-ref：切入点引用
                通知方法格式：public void before(JoinPoint joinPoint);
                    参数1：org.aspectj.lang.JoinPoint  用于描述连接点（目标方法），获得目标方法名等
                例如：
            <aop:before method="before" pointcut-ref="myPointCut"/>
            -->

            <!--
                后置通知
                    <aop:after-returning method="" pointcut-ref="" returning=""/>
                    returning：第二个参数的名称
                通知方法格式：public void afterReturning(JoinPoint joinPoint, Object rtn);
                    参数一：连接点描述
                    参数二：莫表方法的返回值，类型为Object，并需要在returning种进行配置
                例如：
            <aop:after-returning method="afterReturning" pointcut-ref="myPointCut" returning="rtn"/>
            -->

            <!--
                环绕通知
                    <aop:around method="" pointcut-ref=""/>
                通知方法格式：public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable;
                    返回值类型：Object
                    方法名：任意
                    参数：org.aspectj.lang.ProceedingJoinPoint（固定）
                    抛异常：Throwable
                例如：
            -->
            <aop:around method="around" pointcut-ref="myPointCut"/>

            <!--
                抛出异常通知
                    <aop:after-throwing method="" pointcut-ref="" throwing=""/>
                    throwing：通知方法的第二个参数名，指异常
                通知方法格式：
                    public void afterThrowing(JoinPoint joinPoint, Throwable throwable);
                    参数二：捕获的异常的信息，类型为Throwable，参数名需要由throwing进行设置
                例如：
            <aop:after-throwing method="afterThrowing" pointcut-ref="myPointCut" throwing="throwable"/>
            -->

            <!--
                最终通知
                    <aop:after method="" pointcut-ref=""/>
                通知方法格式：
                    public void after(JoinPoint joinPoint);
                例如：
            <aop:after method="after" pointcut-ref="myPointCut"/>
            -->

        </aop:aspect>
    </aop:config>

</beans>