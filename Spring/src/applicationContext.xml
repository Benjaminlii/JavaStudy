<?testXml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        <bean>配置需要创建的对象
            id：用于之后从spring容器获得实例对象时使用
            class：需要创建的对象的全类名
    -->
    <bean id="demoBean" class="testIoC.DemoImpl"/>

    <!--
        <property> 用于进行属性的注入
            name：该属性对应的外层bean的成员变量名
            ref：该属性的bean id
    -->
    <bean id="dao" class="testDI.DaoImpl"/>
    <bean id="service" class="testDI.ServiceImpl">
        <property name="dao" ref="dao"/>
    </bean>

    <!--
            使用Spring实现静态工厂
            这里class为静态工厂的全类名
            factory-method为静态工厂生产该对象是调用的静态方法名
        -->
    <bean id="demoBeanStaticFactory" class="testInject.staticFactory.MyBeanFactory" factory-method="getDemo"/>

    <!--
        Spring实例工厂
        先配置实例工厂的bean
        在要生产的bean中设置实例工厂以及方法
        factory-bean为实例工厂的bean id
        factory-method为实例工厂中的相应方法
    -->
    <!--<bean id="demoFactory" class="testInject.factory.MyBeanFactory"/>-->
    <!--<bean id="demoBeanFactory" factory-bean="demoFactory" factory-method="createDemoImpl"/>-->

    <!--
        作用域
        singleton 单例
        prototype 多例
    -->
    <!--<bean id="demoBeanScope" class="testScope.DemoImpl" scope="singleton"/>-->
    <bean id="demoBeanScope" class="testScope.DemoImpl" scope="prototype"/>

    <!--
        Bean的生命周期
        初始化和销毁
        init-method为初始化函数
        destroy-method为销毁函数
    -->
    <bean id="demoBeanInitDestroy" class="testLifeCycle.DemoImpl" init-method="myInit" destroy-method="myDestroy"/>

    <!--
        前后置处理器，动态代理
    -->
    <!--<bean id="demoBeanPostProcessor" class="testLifeCycle.testBeanPostProcessor.DemoImpl"/>-->
    <!--<bean class="testLifeCycle.testBeanPostProcessor.MyBeanPostProcessor"/>-->

    <!--
        构造函数配置
    -->
    <bean id="studentConstructor" class="testXml.constructor.Student">
        <constructor-arg name="id" value="1"/>
        <constructor-arg name="name" value="Benjamin"/>
        <constructor-arg name="age" value="19"/>
    </bean>
</beans>