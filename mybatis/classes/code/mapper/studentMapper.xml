<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用:需要与接口的全类名一致
 -->
<mapper namespace="code.mapper.StudentMapper">
    <!-- 在映射文件中配置很多sql语句 -->

    <!--需求:通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
     id:标识映射文件中的sql，称为statement的id
     将sql语句封装到mappedStatement对象中，所以将id称为statement的id
     parameterType:指定输入参数的类型
     #{}标示一个占位符,
     #{value}其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意。

     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象
     -->
    <select id="findStudentBySno" parameterType="java.lang.Integer" resultType="pojo.Student">
        select *
        from test_mybatis.studentCustom
        where sno = #{id};
    </select>

    <!-- 根据用户名称模糊查询用户信息，可能返回多条
    resultType：指定就是单条！！记录所映射的java对象类型
    ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
    使用${}拼接sql，引起 sql注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
     -->
    <select id="findStudentBySname" parameterType="java.lang.String" resultType="pojo.Student">
        select *
        from test_mybatis.studentCustom
        where sname like '%${value}%';
    </select>

    <!-- 添加学生信息 -->
    <!-- 如果需要多个参数，则需要在parameterType设置pojo的类型，然后直接使用#{}中取得pojo的成员变量 -->
    <!-- 插入没有返回值 -->

    <!-- 自增加主键 -->
    <insert id="insertStudent" parameterType="pojo.Student">
        insert into test_mybatis.studentCustom (sname, sage, saddress) values (#{sname}, #{sage}, #{saddress});
        <selectKey keyProperty="sno" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id();
        </selectKey>
    </insert>

    <!--&lt;!&ndash; 非自增加主键 &ndash;&gt;-->
    <!--&lt;!&ndash; 这里相当于先填充studentPojo，所以再sql中要留下sno的位置 &ndash;&gt;-->
    <!--<insert id="addStudent" parameterType="pojo.Student">-->
    <!--insert into test_mybatis.studentCustom (sno, sname, sage, saddress) values (#{sno}, #{sname}, #{sage}, #{saddress});-->
    <!--<selectKey keyProperty="sno" order="BEFORE" resultType="java.lang.Integer">-->
    <!--select uuid();-->
    <!--</selectKey>-->
    <!--</insert>-->

    <!-- 删除学生信息 -->
    <delete id="deleteStudentBySno" parameterType="java.lang.Integer">
        delete
        from test_mybatis.studentCustom
        where sno = #{sno};
    </delete>

    <!-- 更新学生信息 -->
    <!-- 这里根据sno更新学生信息，需要传入有sno的Student对象，然后根据sno查询数据，根据其他属性的值进行修改 -->
    <update id="updateStudent" parameterType="pojo.Student">
        update test_mybatis.studentCustom
        set sname    = #{sname},
            sage     = #{sage},
            saddress = #{saddress}
        where sno = #{sno};
    </update>

    <!-- 用户信息综合查询 -->
    <!--
     通过studentQueryVo包装类包装查询时所用到的所有信息（类），作为参数传入
     在sql中调用其中的属性即可
     -->
    <select id="findStudentList" parameterType="StudentQueryVo" resultType="StudentCustom">
        select *
        from test_mybatis.studentCustom
        where sage = #{studentCustom.sage}
          and saddress = #{studentCustom.saddress};
    </select>

    <!-- sql片段 -->
    <sql id="selectStudentWhere">
        <if test="studentCustom != null">
            <if test="studentCustom.sname != null and studentCustom.sname != ''">
                and sname like '%${studentCustom.sname}%'
            </if>
            <if test="studentCustom.sage != null and studentCustom.sage != ''">
                and sage = #{studentCustom.sage}
            </if>
            <if test="studentCustom.saddress != null and studentCustom.saddress != ''">
                and saddress = #{studentCustom.saddress}
            </if>
        </if>
        <if test="snos != null">
            <!-- 使用foreach拼接查询条件
            如“id in（1， 2， 3）”或“and（id = 1 or id = 2 or id = 3）”
            collection：指定输入 对象中集合属性
            item：每个遍历生成对象中
            open：开始遍历时拼接的串
            close：结束遍历时拼接的串
            separator：遍历的两个对象中需要拼接的串
             -->
            <!--<foreach collection="snos" item="sno" open="and (" close=")" separator="or">-->
                <!--&lt;!&ndash; 需要进行拼接的串 &ndash;&gt;-->
                <!--sno = #{sno}-->
            <!--</foreach>-->

            <!-- 实现id in（1， 2， 3） -->
            <foreach collection="snos" item="sno" open="and sno in (" close=")" separator=",">
                #{sno}
            </foreach>
        </if>
    </sql>

    <!-- 动态sql -->
    <select id="findStudentListDynamicSQL" parameterType="StudentQueryVo" resultType="StudentCustom">
        select * from test_mybatis.studentCustom
        <where>
            <include refid="selectStudentWhere"/>
            <!-- 这里可能再调用其他的sql片段 -->
        </where>
    </select>

    <!-- 使用id为toStudent的resultMap将sno_映射为Student.sno，sage_映射为Student.sage -->
    <resultMap id="toStudent" type="Student">
        <id column="sno_" property="sno"/>
        <result column="sage_" property="sage"/>
    </resultMap>

    <!-- resultMap输出映射 -->
    <select id="findStudentListResultMap" parameterType="StudentQueryVo" resultMap="toStudent">
        select sno sno_, sage sage_
        from test_mybatis.studentCustom
        where sage > #{studentCustom.sage}
          and saddress = #{studentCustom.saddress};
    </select>


</mapper>