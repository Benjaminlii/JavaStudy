<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对sql进行分类化管理,理解为sql隔离
 注意：使用mapper代理方法开发，namespace有特殊重要的作用
 -->
<mapper namespace="studentCustom">
    <!-- 在映射文件中配置很多sql语句 -->

    <!--需求:通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
     id:标识映射文件中的sql，称为statement的id
     将sql语句封装到mappedStatement对象中，所以将id称为statement的id
     parameterType:指定输入参数的类型
     #{}标示一个占位符,
     #{value}其中value表示接收输入参数的名称，如果输入参数是简单类型，那么#{}中的值可以任意。

     resultType：指定sql输出结果的映射的java对象类型，select指定resultType表示将单条记录映射成java对象
     -->
   <select id="findStudentById" parameterType="int" resultType="pojo.Student">
       select * from test_mybatis.studentCustom where sno = #{id};
   </select>

    <!-- 根据用户名称模糊查询用户信息，可能返回多条
    resultType：指定就是单条！！记录所映射的java对象类型
    ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中。
    使用${}拼接sql，引起 sql注入
    ${value}：接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
     -->
    <select id="findStudentByName" parameterType="java.lang.String" resultType="pojo.Student">
        select * from test_mybatis.studentCustom where sname like '%${value}%';
    </select>

    <!-- 添加学生信息 -->
    <!-- 如果需要多个参数，则需要在parameterType设置pojo的类型，然后直接使用#{}中取得pojo的成员变量 -->
    <!-- 插入没有返回值 -->

    <!-- 自增加主键 -->
    <insert id="insertStudent" parameterType="pojo.Student">
        insert into test_mybatis.studentCustom (sname, sage, saddress) values (#{sname}, #{sage}, #{saddress});
        <selectKey keyProperty="sno" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id();
        </selectKey>
    </insert>

    <!-- 非自增加主键 -->
    <!-- 这里相当于先填充studentPojo，所以再sql中要留下sno的位置 -->
    <insert id="addStudent" parameterType="pojo.Student">
        insert into test_mybatis.studentCustom (sno, sname, sage, saddress) values (#{sno}, #{sname}, #{sage}, #{saddress});
        <selectKey keyProperty="sno" order="BEFORE" resultType="java.lang.Integer">
            select uuid();
        </selectKey>
    </insert>

    <!-- 删除学生信息 -->
    <delete id="deleteStudentById" parameterType="java.lang.Integer">
        delete from test_mybatis.studentCustom where sno = #{sno};
    </delete>

    <!-- 更新学生信息 -->
    <!-- 这里根据sno更新学生信息，需要传入有sno的Student对象，然后根据sno查询数据，根据其他属性的值进行修改 -->
    <update id="updateStudentById" parameterType="pojo.Student">
    update    test_mybatis.studentCustom set sname = #{sname}, sage = #{sage}, saddress = #{saddress} where sno = #{sno};

    </update>
</mapper>